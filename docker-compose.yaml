version: '3.8'
services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    image: laravel-app
    restart: unless-stopped
    working_dir: /var/www
    volumes:
      - .:/var/www
      - ./docker/php/local.ini:/usr/local/etc/php/conf.d/local.ini
    networks:
      - app-network
    ports:
      - "9000:9000"
    environment:
      - APP_ENV=local
      - APP_DEBUG=true
    # command: >
    #   sh -c "php artisan queue:work &
    #          php-fpm"
    # deploy:
    #   resources:
    #     limits:
    #       cpus: '1'
    #       memory: 512M

  reverb:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: laravel-reverb
    restart: unless-stopped
    working_dir: /var/www
    command: php artisan reverb:start
    volumes:
      - .:/var/www
    ports:
      - "8080:8080" # Expose WebSocket port
    networks:
      - app-network

  queue:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: laravel-queue
    restart: unless-stopped
    working_dir: /var/www
    command: php artisan queue:work
    volumes:
      - .:/var/www
    networks:
      - app-network

  webserver:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      # - "443:443"
      - "80:80"
    volumes:
      - .:/var/www
      # - ./docker/nginx/sites-enabled:/etc/nginx/sites-enabled
      - ./docker/nginx/conf.d:/etc/nginx/conf.d
      # - /etc/letsencrypt:/etc/letsencrypt
    networks:
      - app-network

  db:
    image: mysql:8.0
    restart: unless-stopped
    ports:
      - "3306:3306"
    environment:
      MYSQL_DATABASE: laravel
      MYSQL_ROOT_PASSWORD: root
      MYSQL_PASSWORD: root
      MYSQL_USER: laravel
    volumes:
      - dbdata:/var/lib/mysql
    networks:
      - app-network

  scheduler:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: laravel-scheduler
    restart: unless-stopped
    working_dir: /var/www
    command: php artisan schedule:work
    volumes:
      - .:/var/www
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  dbdata:
    driver: local
